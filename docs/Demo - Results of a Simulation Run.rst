
Demo - Results of a Simulation Run
==================================

In the previous section we ran an EnergyPlus simulation using the :py:meth:`~eprun.eprun.eprun` function.

.. code-block:: python

   >>> from eprun import eprun
   >>> result=eprun(ep_dir='C:\EnergyPlusV9-4-0',
   >>>              input_filepath='1ZoneUncontrolled.idf',
   >>>              epw_filepath='USA_CA_San.Francisco.Intl.AP.724940_TMY3.epw',
   >>>              sim_dir='my_results')
   >>> print(type(result))
   eprun.epresult.EPResult
   
This returns a :py:class:`~eprun.epresult.EPResult` object instance.
We can check if the simulation run was successful - i.e. EnergyPlus ran and generated results files - 
by looking at the :py:attr:`~eprun.epresult.EPResult.returncode` property of the :py:class:`~eprun.epresult.EPResult` object.
This is the `returncode` of the `subprocess.run <https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module>`_ method 
where 0 means success and 1 means failure.

.. code-block:: python

   >>> print(result.returncode)
   0  # A successful EnergyPlus run!
   
The :py:attr:`~eprun.epresult.EPResult.stdout` property of the :py:class:`~eprun.epresult.EPResult` object stores the 
`stdout` of the `subprocess.run <https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module>`_ method.
This is the text generated by the call which would appear if the call was run on the Command Prompt.

.. code-block:: python

   >>> print(result.stdout)
   EnergyPlus Starting
   EnergyPlus, Version 9.4.0-998c4b761e, YMD=2020.12.13 05:56
   Adjusting Air System Sizing
   Adjusting Standard 62.1 Ventilation Sizing
   Initializing Simulation
   Reporting Surfaces
   Beginning Primary Simulation
   Initializing New Environment Parameters
   Warming up {1}
   Warming up {2}
   ### - more lines follow, cut short for this example - ###

The :py:class:`~eprun.epresult.EPResult` object also contains the filepaths of all the results files generated by a successful EnergyPlus run.
These files are stored in the designated simulation directory and are accessed using the :py:attr:`~eprun.epresult.EPResult.files` property.

.. code-block:: python

   >>> print(result.files)
   {'audit': 'C:\\my_results\\eplusout.audit', 
    'bnd': 'C:\\my_results\\eplusout.bnd', 
    'dxf': 'C:\\my_results\\eplusout.dxf', 
    'eio': 'C:\\my_results\\eplusout.eio', 
    'end': 'C:\\my_results\\eplusout.end', 
    'err': 'C:\\my_results\\eplusout.err', 
    'eso': 'C:\\my_results\\eplusout.eso', 
    'mdd': 'C:\\my_results\\eplusout.mdd', 
    'mtd': 'C:\\my_results\\eplusout.mtd', 
    'mtr': 'C:\\my_results\\eplusout.mtr', 
    'rdd': 'C:\\my_results\\eplusout.rdd', 
    'shd': 'C:\\my_results\\eplusout.shd', 
    'csv': 'C:\\my_results\\eplustbl.csv', 
    'htm': 'C:\\my_results\\eplustbl.htm', 
    'tab': 'C:\\my_results\\eplustbl.tab', 
    'txt': 'C:\\my_results\\eplustbl.txt', 
    'xml': 'C:\\my_results\\eplustbl.xml'}

These files contain the results of the EnergyPlus simulation. How to view the contents of these files is described in the next section.

Further resources
-----------------

- The documentation for the :py:class:`~eprun.epresult.EPResult` class.
- This Jupyter Notebook shows the `EPResult` class in action.
- A video tutorial of the `EPResult` class is available `here`.

